{"ast":null,"code":"import{useCallback,useReducer}from\"react\";/**\n * 커스텀 훅\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\n */const formReducer=(state,action)=>{// console.log(state)\nswitch(action.type){case'SET_DATA':return{inputs:action.inputs,isValid:action.formIsValid};case'INPUT_CHANGE':let formIsValid=true;for(const inputId in state.inputs){if(!state.inputs[inputId]){continue;// inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\n}if(inputId===action.inputId){// dispatch 한 ID 를 업데이트 한다\nformIsValid=formIsValid&&action.isValid;}else{// dispatch 한 ID 를 업데이트 하지 않고\n// 기존의 있는 id 를 가져온다\nformIsValid=formIsValid&&state.inputs[inputId].isValid;}}return{...state,inputs:{...state.inputs,[action.inputId]:{value:action.value,isValid:action.isValid}},isValid:formIsValid};default:return state;}};export const useForm=(initialInputs,initialFormValidity)=>{const[formState,dispatch]=useReducer(formReducer,{inputs:initialInputs,isValid:initialFormValidity});const setFormData=useCallback((inputData,formValidity)=>{dispatch({type:'SET_DATA',inputs:inputData,formIsValid:formValidity});},[]);const InputHandler=useCallback((id,value,isValid)=>{dispatch({type:'INPUT_CHANGE',inputId:id,value:value,isValid:isValid});},[]);/*\n   * 밑에 두 함수는 기본적으로 기능이 동일하다.\n   * const exam = (a) => { return 1; }\n   * const exam = useCallback((a) => { return 1; })\n  */// userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\n// 이를 방지 하기 위해 쓰는게 userCallback\n// userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\n// [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\n//  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\nreturn[formState,InputHandler,setFormData];};","map":{"version":3,"names":["useCallback","useReducer","formReducer","state","action","type","inputs","isValid","formIsValid","inputId","value","useForm","initialInputs","initialFormValidity","formState","dispatch","setFormData","inputData","formValidity","InputHandler","id"],"sources":["C:/Users/IMWONHYEOK/study/react/section_13_front/src/shared/hooks/form-hook.js"],"sourcesContent":["import { useCallback, useReducer } from \"react\";\n/**\n * 커스텀 훅\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\n */\n\nconst formReducer = (state, action) => {\n  // console.log(state)\n  switch (action.type) {\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue; // inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\n        }\n        if (inputId === action.inputId) {\n          // dispatch 한 ID 를 업데이트 한다\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          // dispatch 한 ID 를 업데이트 하지 않고\n          // 기존의 있는 id 를 가져온다\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    })\n  }, []);\n\n  const InputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    })\n  }, []);\n\n  /*\n   * 밑에 두 함수는 기본적으로 기능이 동일하다.\n   * const exam = (a) => { return 1; }\n   * const exam = useCallback((a) => { return 1; })\n  */\n  // userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\n  // 이를 방지 하기 위해 쓰는게 userCallback\n  // userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\n  // [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\n  //  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\n\n  return [formState, InputHandler, setFormData];\n};"],"mappings":"AAAA,OAASA,WAAW,CAAEC,UAAU,KAAQ,OAAO,CAC/C;AACA;AACA;AACA;AACA,GAEA,KAAM,CAAAC,WAAW,CAAGA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACrC;AACA,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,UAAU,CACb,MAAO,CACLC,MAAM,CAAEF,MAAM,CAACE,MAAM,CACrBC,OAAO,CAAEH,MAAM,CAACI,WAClB,CAAC,CACH,IAAK,cAAc,CACjB,GAAI,CAAAA,WAAW,CAAG,IAAI,CACtB,IAAK,KAAM,CAAAC,OAAO,GAAI,CAAAN,KAAK,CAACG,MAAM,CAAE,CAClC,GAAI,CAACH,KAAK,CAACG,MAAM,CAACG,OAAO,CAAC,CAAE,CAC1B,SAAU;AACZ,CACA,GAAIA,OAAO,GAAKL,MAAM,CAACK,OAAO,CAAE,CAC9B;AACAD,WAAW,CAAGA,WAAW,EAAIJ,MAAM,CAACG,OAAO,CAC7C,CAAC,IAAM,CACL;AACA;AACAC,WAAW,CAAGA,WAAW,EAAIL,KAAK,CAACG,MAAM,CAACG,OAAO,CAAC,CAACF,OAAO,CAC5D,CACF,CACA,MAAO,CACL,GAAGJ,KAAK,CACRG,MAAM,CAAE,CACN,GAAGH,KAAK,CAACG,MAAM,CACf,CAACF,MAAM,CAACK,OAAO,EAAG,CAChBC,KAAK,CAAEN,MAAM,CAACM,KAAK,CACnBH,OAAO,CAAEH,MAAM,CAACG,OAClB,CACF,CAAC,CACDA,OAAO,CAAEC,WACX,CAAC,CACH,QACE,MAAO,CAAAL,KAAK,CAChB,CACF,CAAC,CAED,MAAO,MAAM,CAAAQ,OAAO,CAAGA,CAACC,aAAa,CAAEC,mBAAmB,GAAK,CAE7D,KAAM,CAACC,SAAS,CAAEC,QAAQ,CAAC,CAAGd,UAAU,CAACC,WAAW,CAAE,CACpDI,MAAM,CAAEM,aAAa,CACrBL,OAAO,CAAEM,mBACX,CAAC,CAAC,CAEF,KAAM,CAAAG,WAAW,CAAGhB,WAAW,CAAC,CAACiB,SAAS,CAAEC,YAAY,GAAK,CAC3DH,QAAQ,CAAC,CACPV,IAAI,CAAE,UAAU,CAChBC,MAAM,CAAEW,SAAS,CACjBT,WAAW,CAAEU,YACf,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,YAAY,CAAGnB,WAAW,CAAC,CAACoB,EAAE,CAAEV,KAAK,CAAEH,OAAO,GAAK,CACvDQ,QAAQ,CAAC,CACPV,IAAI,CAAE,cAAc,CACpBI,OAAO,CAAEW,EAAE,CACXV,KAAK,CAAEA,KAAK,CACZH,OAAO,CAAEA,OACX,CAAC,CAAC,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN;AACF;AACA;AACA;AACA,IACE;AACA;AACA;AACA;AACA;AAEA,MAAO,CAACO,SAAS,CAAEK,YAAY,CAAEH,WAAW,CAAC,CAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}