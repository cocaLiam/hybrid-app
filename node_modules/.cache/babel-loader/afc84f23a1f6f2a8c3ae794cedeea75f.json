{"ast":null,"code":"import{useState,useCallback,useRef,useEffect}from\"react\";export const useHttpClient=()=>{const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState();const activeHttpRequests=useRef([]);// [] 빈 배열의 주소값 같은거라고 생각 하면 됨. activeHttpRequests.current <- &activeHttpRequests\n// useRef(); 인 경우, 주로 DOM 요소에 대한 직접적인 참조를 관리하기 위해 사용되고,\n// activeHttpRequests는 컴포넌트의 상태와는 독립적으로 유지되어야 하는 변경 가능한 데이터를 관리하기 위해 사용됩니다.\nconst sendRequest=useCallback(async function(url){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"GET\";let body=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let headers=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};// body 가 null 인 경우, headers 가 json 타입이면 fetch에 fail 한다.\nconsole.log(`HTTP 요청 url --> ${method} }\\n${url.substring(0,22)} \\n${url.substring(22)}`);// if (body !== null) {\n//   headers = { \"Content-Type\": \"application/json\" };\n// }\nsetIsLoading(true);const httpAbortCtrl=new AbortController();activeHttpRequests.current.push(httpAbortCtrl);try{const response=await fetch(url,{method,body,headers,signal:httpAbortCtrl.signal});const responseData=await response.json();activeHttpRequests.current=activeHttpRequests.current.filter(reqCtrl=>reqCtrl!==httpAbortCtrl);if(response.ok){// responseData.ok 는 상태코드가 200번대 일때 true를 반환한다\nreturn responseData;}else{throw new Error(responseData.message);}}catch(error){setError(error.message);setIsLoading(false);throw error;}finally{setIsLoading(false);}},[]);const clearError=()=>{setError(null);};useEffect(()=>{return()=>{activeHttpRequests.current.forEach(abortCtrl=>abortCtrl.abort());// abort 메서드를 호출하여 HTTP 요청을 취소\n/**\n          for (let i = 0; i < activeHttpRequests.current.length; i++) {\n            const abortCtrl = activeHttpRequests.current[i];\n            abortCtrl.abort();\n          }\n       */};},[]);return{isLoading,error,sendRequest,clearError};};// // axios 서드파티Lib 쓰는 경우\n// if (isLoginMode) {\n//     // 로그인 모드일 때의 로직\n// } else {\n//     // 회원가입 모드일 때의 로직\n//     try {\n//         const response = await axios.post('http://localhost:5000/api/users/signup', {\n//             name: formState.inputs.name.value,\n//             email: formState.inputs.email.value,\n//             password: formState.inputs.password.value\n//         }, {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         });\n//         const responseData = response.data;\n//         console.log(responseData);\n//         auth.login();\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","arguments","length","undefined","body","headers","console","log","substring","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","clearError","forEach","abortCtrl","abort"],"sources":["/mnt/c/Users/IMWONHYEOK/study/react/section_13_front/src/shared/hooks/http-hook.js"],"sourcesContent":["import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n  // [] 빈 배열의 주소값 같은거라고 생각 하면 됨. activeHttpRequests.current <- &activeHttpRequests\n  // useRef(); 인 경우, 주로 DOM 요소에 대한 직접적인 참조를 관리하기 위해 사용되고,\n  // activeHttpRequests는 컴포넌트의 상태와는 독립적으로 유지되어야 하는 변경 가능한 데이터를 관리하기 위해 사용됩니다.\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      // body 가 null 인 경우, headers 가 json 타입이면 fetch에 fail 한다.\n      console.log(`HTTP 요청 url --> ${method} }\\n${url.substring(0, 22)} \\n${url.substring(22, )}`);\n\n      // if (body !== null) {\n      //   headers = { \"Content-Type\": \"application/json\" };\n      // }\n      \n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal,\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\n        );\n\n        if (response.ok) {\n          // responseData.ok 는 상태코드가 200번대 일때 true를 반환한다\n          return responseData;\n        } else {\n          throw new Error(responseData.message);\n        }\n      } catch (error) {\n        setError(error.message);\n        setIsLoading(false);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort()); // abort 메서드를 호출하여 HTTP 요청을 취소\n      /**\n          for (let i = 0; i < activeHttpRequests.current.length; i++) {\n            const abortCtrl = activeHttpRequests.current[i];\n            abortCtrl.abort();\n          }\n       */\n    };\n  }, []);\n  return { isLoading, error, sendRequest, clearError };\n};\n\n// // axios 서드파티Lib 쓰는 경우\n// if (isLoginMode) {\n//     // 로그인 모드일 때의 로직\n// } else {\n//     // 회원가입 모드일 때의 로직\n//     try {\n//         const response = await axios.post('http://localhost:5000/api/users/signup', {\n//             name: formState.inputs.name.value,\n//             email: formState.inputs.email.value,\n//             password: formState.inputs.password.value\n//         }, {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         });\n\n//         const responseData = response.data;\n//         console.log(responseData);\n//         auth.login();\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,WAAW,CAAEC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAEhE,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACjC,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACO,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAC,CAAC,CAEpC,KAAM,CAAAS,kBAAkB,CAAGP,MAAM,CAAC,EAAE,CAAC,CACrC;AACA;AACA;AAEA,KAAM,CAAAQ,WAAW,CAAGT,WAAW,CAC7B,eAAOU,GAAG,CAAgD,IAA9C,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,IAAE,CAAAG,IAAI,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,IAAE,CAAAI,OAAO,CAAAJ,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACnD;AACAK,OAAO,CAACC,GAAG,CAAC,mBAAmBP,MAAM,OAAOD,GAAG,CAACS,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,MAAMT,GAAG,CAACS,SAAS,CAAC,EAAI,CAAC,EAAE,CAAC,CAE5F;AACA;AACA;AAEAd,YAAY,CAAC,IAAI,CAAC,CAClB,KAAM,CAAAe,aAAa,CAAG,GAAI,CAAAC,eAAe,CAAC,CAAC,CAC3Cb,kBAAkB,CAACc,OAAO,CAACC,IAAI,CAACH,aAAa,CAAC,CAE9C,GAAI,CACF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACf,GAAG,CAAE,CAChCC,MAAM,CACNI,IAAI,CACJC,OAAO,CACPU,MAAM,CAAEN,aAAa,CAACM,MACxB,CAAC,CAAC,CAEF,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAE1CpB,kBAAkB,CAACc,OAAO,CAAGd,kBAAkB,CAACc,OAAO,CAACO,MAAM,CAC3DC,OAAO,EAAKA,OAAO,GAAKV,aAC3B,CAAC,CAED,GAAII,QAAQ,CAACO,EAAE,CAAE,CACf;AACA,MAAO,CAAAJ,YAAY,CACrB,CAAC,IAAM,CACL,KAAM,IAAI,CAAAK,KAAK,CAACL,YAAY,CAACM,OAAO,CAAC,CACvC,CACF,CAAE,MAAO3B,KAAK,CAAE,CACdC,QAAQ,CAACD,KAAK,CAAC2B,OAAO,CAAC,CACvB5B,YAAY,CAAC,KAAK,CAAC,CACnB,KAAM,CAAAC,KAAK,CACb,CAAC,OAAS,CACRD,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CACD,EACF,CAAC,CAED,KAAM,CAAA6B,UAAU,CAAGA,CAAA,GAAM,CACvB3B,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAEDL,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACXM,kBAAkB,CAACc,OAAO,CAACa,OAAO,CAAEC,SAAS,EAAKA,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;AACtE;AACN;AACA;AACA;AACA;AACA,SACI,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,CAAEjC,SAAS,CAAEE,KAAK,CAAEG,WAAW,CAAEyB,UAAW,CAAC,CACtD,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}