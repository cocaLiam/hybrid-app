{"ast":null,"code":"import React,{useRef,useState,useEffect}from\"react\";import Button from\"./Button\";import'./ImageUpload.css';const ImageUpload=props=>{const[filePath,setFile]=useState();const[previewUrl,setPreviewUrl]=useState();const[isValid,setIsValid]=useState(false);const filePickerRef=useRef();useEffect(()=>{if(!filePath){return;}const fileReader=new FileReader();fileReader.onload=()=>{setPreviewUrl(fileReader.result);};fileReader.readAsDataURL(filePath);},[filePath]);const pickedHandler=event=>{// console.log(event.target.files);\n// console.log(Object.keys(event.target)); // 이벤트 객체의 프로퍼티 이름들을 배열로 출력\nconsole.dir(event.target.files);// console.dir(event.target); // 이벤트 객체를 트리 구조로 출력\nlet pickedFile;let fileIsValid=isValid;if(event.target.files&&event.target.files.length===1){pickedFile=event.target.files[0];setFile(pickedFile);setIsValid(true);fileIsValid=true;/**\n       * setState 함수(예: setIsValid)는 상태를 즉시 업데이트하는 것이 아니라, \n       * 상태 업데이트를 예약하는 역할을 하기 때문에, 상태가 즉시 변경되지 않고 \n       * 다음 렌더링 사이클에서 변경되므로 \"fileIsValid = true;\" 이렇게 정의해서 넘김\n       */}else{setIsValid(false);fileIsValid=false;}props.onInput(props.id,pickedFile,fileIsValid);};const pickImageHandler=()=>{filePickerRef.current.click();};return/*#__PURE__*/React.createElement(\"div\",{className:\"form-control\"},/*#__PURE__*/React.createElement(\"input\",{id:props.id,ref:filePickerRef,style:{display:'none'},type:\"file\",accept:\".jpg,.png,.jpeg\",onChange:pickedHandler}),/*#__PURE__*/React.createElement(\"div\",{className:`image-upload ${props.center&&'center'}`},/*#__PURE__*/React.createElement(\"div\",{className:\"image-upload__preview\"},previewUrl&&/*#__PURE__*/React.createElement(\"img\",{src:previewUrl,alt:\"Preview\"}),!previewUrl&&/*#__PURE__*/React.createElement(\"p\",null,\"Please pick an image.\")),/*#__PURE__*/React.createElement(Button,{type:\"button\",onClick:pickImageHandler},\"PICK IMAGE\")),!isValid&&/*#__PURE__*/React.createElement(\"p\",null,props.errorText));};export default ImageUpload;","map":{"version":3,"names":["React","useRef","useState","useEffect","Button","ImageUpload","props","filePath","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","pickedHandler","event","console","dir","target","files","pickedFile","fileIsValid","length","onInput","id","pickImageHandler","current","click","createElement","className","ref","style","display","type","accept","onChange","center","src","alt","onClick","errorText"],"sources":["C:/Users/IMWONHYEOK/study/react/section_13_front/src/shared/components/FormElements/ImageUpload.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nimport Button from \"./Button\";\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const [filePath, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!filePath) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(filePath);\n  }, [filePath])\n\n  const pickedHandler = (event) => {\n    // console.log(event.target.files);\n    // console.log(Object.keys(event.target)); // 이벤트 객체의 프로퍼티 이름들을 배열로 출력\n    console.dir(event.target.files);\n    // console.dir(event.target); // 이벤트 객체를 트리 구조로 출력\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n      /**\n       * setState 함수(예: setIsValid)는 상태를 즉시 업데이트하는 것이 아니라, \n       * 상태 업데이트를 예약하는 역할을 하기 때문에, 상태가 즉시 변경되지 않고 \n       * 다음 렌더링 사이클에서 변경되므로 \"fileIsValid = true;\" 이렇게 정의해서 넘김\n       */\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type='file'\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`} >\n        <div className=\"image-upload__preview\">\n        {/* <React.Fragment> */}\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        {/* </React.Fragment> */}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  )\n};\n\nexport default ImageUpload;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}