{"ast":null,"code":"import React,{useState,useContext}from\"react\";import{VALIDATOR_EMAIL,VALIDATOR_MINLENGTH,VALIDATOR_REQUIRE}from\"../../shared/util/validators\";// eslint-disable-next-line\nimport axios from'axios';import Card from\"../../shared/components/UIElements/Card\";import Input from\"../../shared/components/FormElements/Input\";import Button from\"../../shared/components/FormElements/Button\";import ErrorModal from\"../../shared/components/UIElements/ErrorModal\";import LoadingSpinner from\"../../shared/components/UIElements/LoadingSpinner\";import ImageUpload from'../../shared/components/FormElements/ImageUpload';import{AuthContext}from\"../../shared/context/auth-context\";import{checkProps}from\"../../shared/util/codeHelperUtils\";import{useForm}from\"../../shared/hooks/form-hook\";import{useHttpClient}from\"../../shared/hooks/http-hook\";import'./Auth.css';const Auth=()=>{const auth=useContext(AuthContext);const[isLoginMode,setIsLoginMode]=useState(true);const{isLoading,error,sendRequest,clearError}=useHttpClient();const[formState,inputHandler,setFormData]=useForm({email:{value:'',isValid:false},password:{value:'',isValid:false}},false);const switchModeHandler=()=>{if(!isLoginMode){setFormData({...formState.inputs,// 기존의 값은 유지하며 \nname:undefined,// name 필드만 undefined 함\nimage:undefined},formState.inputs.email.isValid&&formState.inputs.password.isValid);}else{setFormData({...formState.inputs,// 기존의 값은 유지하며 \nname:{// 다른 필드의 값만 Add 함.\nvalue:'',isValid:false},image:{value:null,isValid:false}},false);}setIsLoginMode(prevMode=>!prevMode);};const authSubmitHandler=async event=>{event.preventDefault();// 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n// console.log(formState.inputs);\n// fetch 함수를 쓰는 경우\nif(isLoginMode){// 로그인 모드일 때의 로직\ntry{const responseData=await sendRequest(`${process.env.REACT_APP_BASE}${process.env.REACT_APP_USERS_ROUTE}${process.env.REACT_APP_LOGIN}`,'POST',JSON.stringify({email:formState.inputs.email.value,password:formState.inputs.password.value}),{\"Content-Type\":\"application/json\"});checkProps(responseData,['userId','token']);auth.login(responseData.userId,responseData.token);// auth.login 함수를 씀으로 setToken, setUserId 값이 갱신됨 -> 리렌더링\n}catch(err){}/** image data 가 없는 JSON 타입일떄 */// } else {\n//   // 회원가입 모드일 때의 로직\n//   try {\n//     const responseData = await sendRequest(\n//       `${API_BASE.home}${API_BASE.usersRoutes}${API_USERS.signup}`,\n//       'POST',\n//       JSON.stringify({\n//         name: formState.inputs.name.value,\n//         email: formState.inputs.email.value,\n//         password: formState.inputs.password.value\n//       }),\n//       { \"Content-Type\": \"application/json\" }\n//     );\n//     console.log(responseData);\n//     // auth.userId = responseData.user.id;\n//     auth.login(responseData.user.id); // useState를 쓰기위함\n//   } catch (err) { }\n}else{// 회원가입 모드일 때의 로직\ntry{const formData=new FormData();formData.append('name',formState.inputs.name.value);formData.append('email',formState.inputs.email.value);formData.append('password',formState.inputs.password.value);formData.append('image',formState.inputs.image.value);const responseData=await sendRequest(`${process.env.REACT_APP_BASE}${process.env.REACT_APP_USERS_ROUTE}${process.env.REACT_APP_SIGNUP}`,'POST',formData);checkProps(responseData,['userId','token']);auth.login(responseData.userId,responseData.token);}catch(err){}}};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ErrorModal,{showError:error,onClear:clearError}),/*#__PURE__*/React.createElement(Card,{className:\"authentication\"},isLoading&&/*#__PURE__*/React.createElement(LoadingSpinner,{asOverlay:true}),/*#__PURE__*/React.createElement(\"h2\",null,\"Login Required\"),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(\"form\",{onSubmit:authSubmitHandler},!isLoginMode&&/*#__PURE__*/React.createElement(Input,{element:\"input\",id:\"name\",type:\"text\",label:\"Your Name\",validators:[VALIDATOR_REQUIRE()],errorText:\"Please enter a name.\",onInput:inputHandler}),!isLoginMode&&/*#__PURE__*/React.createElement(ImageUpload,{center:true,id:\"image\",onInput:inputHandler,errorText:\"please provide a image\"}),/*#__PURE__*/React.createElement(Input,{element:\"input\",id:\"email\",type:\"email\",label:\"E-mail\",validators:[VALIDATOR_EMAIL()],errorText:\"Please enter a valid Email address.\",onInput:inputHandler}),/*#__PURE__*/React.createElement(Input,{element:\"input\",id:\"password\",type:\"password\",label:\"Password\",validators:[VALIDATOR_MINLENGTH(6)],errorText:\"Please enter a valid password, at least 6 characters.\",onInput:inputHandler}),/*#__PURE__*/React.createElement(Button,{type:\"submit\",disabled:!formState.isValid},isLoginMode?\"확인\":\"회원정보 작성 완료\")),/*#__PURE__*/React.createElement(Button,{inverse:true,onClick:switchModeHandler},isLoginMode?'회원 가입':'로그인',\"\\uC73C\\uB85C \\uAC00\\uAE30\")));};export default Auth;","map":{"version":3,"names":["React","useState","useContext","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","axios","Card","Input","Button","ErrorModal","LoadingSpinner","ImageUpload","AuthContext","checkProps","useForm","useHttpClient","Auth","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","image","prevMode","authSubmitHandler","event","preventDefault","responseData","process","env","REACT_APP_BASE","REACT_APP_USERS_ROUTE","REACT_APP_LOGIN","JSON","stringify","login","userId","token","err","formData","FormData","append","REACT_APP_SIGNUP","createElement","Fragment","showError","onClear","className","asOverlay","onSubmit","element","id","type","label","validators","errorText","onInput","center","disabled","inverse","onClick"],"sources":["/mnt/c/Users/IMWONHYEOK/study/react/section_13_front/src/user/pages/Auth.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport {\n  VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE\n} from \"../../shared/util/validators\";\n\n// eslint-disable-next-line\nimport axios from 'axios';\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { checkProps } from \"../../shared/util/codeHelperUtils\";\n\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        ...formState.inputs,     // 기존의 값은 유지하며 \n        name: undefined,         // name 필드만 undefined 함\n        image: undefined,\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,    // 기존의 값은 유지하며 \n          name: {                 // 다른 필드의 값만 Add 함.\n            value: '',\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          }\n        },\n        false\n      );\n    }\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmitHandler = async event => {\n    event.preventDefault(); // 폼 제출 시 기본 동작인 페이지 새로고침을 막고, 다른 작업을 수행할 수 있습니다.\n    // console.log(formState.inputs);\n\n    // fetch 함수를 쓰는 경우\n    if (isLoginMode) {\n      // 로그인 모드일 때의 로직\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BASE}${process.env.REACT_APP_USERS_ROUTE}${process.env.REACT_APP_LOGIN}`,\n          'POST',\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          }),\n          { \"Content-Type\": \"application/json\" }\n        );\n        checkProps(responseData, [ 'userId', 'token' ]);\n        auth.login(responseData.userId, responseData.token);\n        // auth.login 함수를 씀으로 setToken, setUserId 값이 갱신됨 -> 리렌더링\n\n      } catch (err) { }\n      /** image data 가 없는 JSON 타입일떄 */\n      // } else {\n      //   // 회원가입 모드일 때의 로직\n      //   try {\n      //     const responseData = await sendRequest(\n      //       `${API_BASE.home}${API_BASE.usersRoutes}${API_USERS.signup}`,\n      //       'POST',\n      //       JSON.stringify({\n      //         name: formState.inputs.name.value,\n      //         email: formState.inputs.email.value,\n      //         password: formState.inputs.password.value\n      //       }),\n      //       { \"Content-Type\": \"application/json\" }\n      //     );\n      //     console.log(responseData);\n      //     // auth.userId = responseData.user.id;\n      //     auth.login(responseData.user.id); // useState를 쓰기위함\n\n      //   } catch (err) { }\n\n\n    } else {\n      // 회원가입 모드일 때의 로직\n      try {\n        const formData = new FormData();\n        formData.append('name', formState.inputs.name.value);\n        formData.append('email', formState.inputs.email.value);\n        formData.append('password', formState.inputs.password.value);\n        formData.append('image', formState.inputs.image.value);\n\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BASE}${process.env.REACT_APP_USERS_ROUTE}${process.env.REACT_APP_SIGNUP}`,\n          'POST',\n          formData\n        );\n        checkProps(responseData, [ 'userId', 'token' ]);\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) { }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal showError={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload center id=\"image\"\n              onInput={inputHandler}\n              errorText=\"please provide a image\"\n            />\n          )}\n          <Input element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid Email address.\"\n            onInput={inputHandler}\n          />\n          <Input element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"확인\" : \"회원정보 작성 완료\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>{isLoginMode ? '회원 가입' : '로그인'}으로 가기</Button>\n      </Card>\n    </React.Fragment>);\n};\n\nexport default Auth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}