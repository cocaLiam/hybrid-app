{"version":3,"sources":["shared/components/FormElements/Button.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/http-hook.js","shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Button","props","href","React","createElement","className","size","inverse","danger","children","to","Link","exact","type","onClick","disabled","ErrorModal","Modal","onCancel","onClear","header","show","showError","footer","ModalOverlay","content","style","headerClass","onSubmit","event","preventDefault","contentClass","footerClass","ReactDOM","createPortal","document","getElementById","Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","useHttpClient","isLoading","setIsLoading","useState","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","async","url","method","arguments","length","undefined","body","headers","console","log","substring","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","Card","Map","mapRef","center","zoom","map","window","google","maps","Marker","position","ref","PlaceItem","auth","useContext","AuthContext","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","address","coordinates","id","Authorization","token","onDelete","err","LoadingSpinner","asOverlay","src","image","alt","title","description","openMapHandler","userId","creatorId","showDeleteWarningHandler","PlaceList","items","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","places","fetchPlaces","deletedPlaceId","prevPlaces"],"mappings":"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","file":"static/js/6.2a14daa3.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport React from 'react';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  \n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.showError}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.showError}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from \"react-transition-group\";\n\nimport Backdrop from './Backdrop'\nimport './Modal.css'\n\nconst ModalOverlay = props => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit ? props.onSubmit : (event) => { event.preventDefault() }\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\n};\n\nconst Modal = props => {\n  return (\n    <React.Fragment>\n      {props.show ? <Backdrop onClick={props.onCancel} /> : null}\n      {/* {props.show && <Backdrop onClick={props.onCancel} />} <-- 어두운 배경 클릭시 Cancel 핸들러 동작*/}\n\n      <CSSTransition\n        in={props.show} // CSSTransition 의 in props 가 true 면 mount 하고 false면 unmount 함\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n\n/*\n{drawerIsOpen ? <Backdrop onClick={closeDrawer} /> : null}\n둘의 형상은 동일함 // if drawerIsOpen is True : <Backdrop onClick={closeDrawer} /> 이므로\n{drawerIsOpen && <Backdrop onClick={closeDrawer} />}\n*/\nexport default Modal;","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n  // [] 빈 배열의 주소값 같은거라고 생각 하면 됨. activeHttpRequests.current <- &activeHttpRequests\n  // useRef(); 인 경우, 주로 DOM 요소에 대한 직접적인 참조를 관리하기 위해 사용되고,\n  // activeHttpRequests는 컴포넌트의 상태와는 독립적으로 유지되어야 하는 변경 가능한 데이터를 관리하기 위해 사용됩니다.\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      // body 가 null 인 경우, headers 가 json 타입이면 fetch에 fail 한다.\n      console.log(`HTTP 요청 url --> ${method} }\\n${url.substring(0, 22)} \\n${url.substring(22, )}`);\n\n      // if (body !== null) {\n      //   headers = { \"Content-Type\": \"application/json\" };\n      // }\n      \n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal,\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\n        );\n\n        if (response.ok) {\n          // responseData.ok 는 상태코드가 200번대 일때 true를 반환한다\n          return responseData;\n        } else {\n          throw new Error(responseData.message);\n        }\n      } catch (error) {\n        setError(error.message);\n        setIsLoading(false);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort()); // abort 메서드를 호출하여 HTTP 요청을 취소\n      /**\n          for (let i = 0; i < activeHttpRequests.current.length; i++) {\n            const abortCtrl = activeHttpRequests.current[i];\n            abortCtrl.abort();\n          }\n       */\n    };\n  }, []);\n  return { isLoading, error, sendRequest, clearError };\n};\n\n// // axios 서드파티Lib 쓰는 경우\n// if (isLoginMode) {\n//     // 로그인 모드일 때의 로직\n// } else {\n//     // 회원가입 모드일 때의 로직\n//     try {\n//         const response = await axios.post('http://localhost:5000/api/users/signup', {\n//             name: formState.inputs.name.value,\n//             email: formState.inputs.email.value,\n//             password: formState.inputs.password.value\n//         }, {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         });\n\n//         const responseData = response.data;\n//         console.log(responseData);\n//         auth.login();\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from \"react\";\n\nimport './Map.css'\n\nconst Map = props => {\n  const mapRef = useRef();\n\n  const { center, zoom } = props;\n  // const [center, zoom] = [props.center, props.zoom];\n  // const { center, zoom } = { center: props.center, zoom: props.zoom };\n\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom\n    });\n\n    new window.google.maps.Marker(\n      {\n        position: center,\n        map: map\n      }\n    );\n  }, [center, zoom])\n\n  return (\n    <div ref={mapRef}\n      className={`map \n      ${props.className} \n      style={props.style}`}\n    ></div>\n  );\n}\nexport default Map;\n\n\n\n\n// /**\n//  * 설명:\n//  * 1. useRef()함수로 참조변수(inputRef) 생성\n//  * 2. 참조변수(inputRef)를 input 태그의 ref 속성에 대입하여 input 태그의 DOM 요소에 직접 접근을 가능하게 함\n//  * 3. [입력 필드에 포커스] 버튼 Click 시, focusInput 함수 실행\n//  * 4. inputRef.current.focus(); 함수로 input 태그에 포커싱\n//  * \n//  * 동작 : [입력 필드에 포커스]라는 버튼을 눌렀는데, \n//  * [여기에 입력] 이라는 text 필드에 커서(포커스)가 생기도록함\n//  */\n\n// import React, { useRef } from 'react';\n\n// const FocusInput = () => {\n//   // useRef를 사용하여 inputRef라는 변수를 생성합니다.\n//   const inputRef = useRef();\n\n//   const focusInput = () => {\n//     // inputRef.current는 해당 input 요소를 참조합니다.\n//     // focus() 메서드를 호출하여 입력 필드에 포커스를 줍니다.\n//     inputRef.current.focus();\n//   };\n\n//   return (\n//     <div>\n//       {/* input 요소에 ref 속성을 설정하여 inputRef와 연결합니다. */}\n//       <input ref={inputRef} type=\"text\" placeholder=\"여기에 입력\" />\n//       <button onClick={focusInput}>입력 필드에 포커스</button>\n//     </div>\n//   );\n// };\n\n// export default FocusInput;\n","import React, { useState, useContext } from 'react';\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Modal from \"../../shared/components/UIElements/Modal\";\nimport Map from \"../../shared/components/UIElements/Map\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './PlaceItem.css';\n// import { useHistory } from \"react-router-dom\";\n\nconst PlaceItem = props => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const auth = useContext(AuthContext);\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false)\n  // const history = useHistory();\n\n  const openMapHandler = () => setShowMap(true);\n\n  const closeMapHandler = () => setShowMap(false);\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BASE}${process.env.REACT_APP_PLACES_ROUTE}/${props.id}`,\n        \"DELETE\",\n        null,\n        { Authorization : `Bearer: ${auth.token}`}\n      );\n      props.onDelete(props.id);\n      // props.onDeletePlace(props.id);\n    } catch (err) {}\n  };\n\n  //\n  // if (isLoading) {\n//   return (\n  //     <div className=\"center\">\n  //       <LoadingSpinner />\n  //     </div>\n  //   );\n  // }\n  //\n\n  return (\n    <React.Fragment>\n      <ErrorModal showError={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16} />\n          {/* <h2>The Map!</h2> */}\n        </div>\n      </Modal>\n\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are u sure?\"\n        footerClass=\"place-item__modal-actions\" footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>CANCEL</Button>\n            <Button danger onClick={confirmDeleteHandler}>DELETE</Button>\n          </React.Fragment>\n        }>\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          can't be undone thereafter.\n        </p>\n      </Modal>\n\n      {/* <Modal header=\"Are u sure?\" footerClass=\"place-item__modal-actions\" footer={\n          <button>CANCEL</button>\n      }>\n        <p>\n          Do u want to proceed and delete this place? please note.\n        </p>\n      </Modal> */}\n\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img src={`${process.env.REACT_APP_BASE}/${props.image}`} alt={props.title} />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p> {props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>VIEW ON MAP </Button>\n            {/* {auth.isLoggedIn &&  <- 이렇게 하면 A 사용자가 B 사용자의 장소까지 Update 및 Delete 할 수 있게 되므로 */}\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>Edit</Button>\n            )}\n            {/* {auth.isLoggedIn && ( */}\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarningHandler}>DELETE</Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n\n","import React from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport PlaceItem from \"./PlaceItem\";\nimport Button from \"../../shared/components/FormElements/Button\";\n\nimport \"./PlaceList.css\";\n\nconst PlaceList = (props) => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Maybe create one?</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <ul className=\"place-list\">\n      {props.items.map((place) => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from 'react-router-dom';\n\nimport PlaceList from \"../components/PlaceList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\n// const DUMMY_PLACES = [\n//   {\n//     id: 'p1',\n//     title: 'Empire State Building',\n//     description: 'One of the most famous sky scrapers in the world!',\n//     imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n//     address: '20 W 34th St, New York, NY 10001',\n//     location: {\n//       lat: 40.7484405,\n//       lng: -73.9878584\n//     },\n//     creator: 'u1'\n//   },\n//   {\n//     id: 'p2',\n//     title: 'Empire State Building',\n//     description: 'One of the most famous sky scrapers in the world!',\n//     imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/NYC_Empire_State_Building.jpg/640px-NYC_Empire_State_Building.jpg',\n//     address: '20 W 34th St, New York, NY 10001',\n//     location: {\n//       lat: 40.7484405,\n//       lng: -73.9878584\n//     },\n//     creator: 'u2'\n//   }\n// ];\n\n\n// // 렌더링 하는 루트 JS 에서 이렇게 UserPlaces 를 렌더링 한다면\n// // :userId 에 들어가는 동적인 값이 \"useParams().userId;\" 여기로 호출 된다.\n// <Route path=\"/:userId/places\" exact>\n//   <UserPlaces />\n// </Route>\n\nconst UserPlaces = () => {\n  const [ loadedPlaces, setLoadedPlaces ] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId;\n\n  useEffect( () => {\n    const fetchPlaces = async () => {\n      try{\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BASE}${process.env.REACT_APP_PLACES_ROUTE}/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      }catch(err) { }\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const placeDeletedHandler = (deletedPlaceId) => {\n    setLoadedPlaces(prevPlaces =>\n      prevPlaces.filter(place => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal showError={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler}/>}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;"],"sourceRoot":""}