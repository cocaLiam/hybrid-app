{"version":3,"sources":["shared/components/FormElements/Button.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/http-hook.js","shared/util/validators.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["Button","props","href","React","createElement","className","size","inverse","danger","children","to","Link","exact","type","onClick","disabled","ErrorModal","Modal","onCancel","onClear","header","show","showError","footer","ModalOverlay","content","style","headerClass","onSubmit","event","preventDefault","contentClass","footerClass","ReactDOM","createPortal","document","getElementById","Fragment","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","useHttpClient","isLoading","setIsLoading","useState","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","async","url","method","arguments","length","undefined","body","headers","console","log","substring","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","test","inputReducer","state","action","isTouched","Input","inputState","dispatch","useReducer","initialValue","initialValid","id","onInput","changeHandler","target","touchHandler","element","placeholder","onChange","onBlur","rows","htmlFor","label","errorText","formReducer","inputs","formIsValid","inputId","useForm","initialInputs","initialFormValidity","formState","setFormData","inputData","formValidity","ImageUpload","filePath","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","pickedFile","dir","files","fileIsValid","center","src","alt","pickImageHandler","click","NewPlace","auth","useContext","AuthContext","inputHandler","title","description","address","image","history","useHistory","formData","FormData","append","Authorization","token","err","LoadingSpinner","asOverlay"],"mappings":"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","file":"static/js/4.bfe8c715.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\nimport React from 'react';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  \n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.showError}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.showError}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from \"react-transition-group\";\n\nimport Backdrop from './Backdrop'\nimport './Modal.css'\n\nconst ModalOverlay = props => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit ? props.onSubmit : (event) => { event.preventDefault() }\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\n};\n\nconst Modal = props => {\n  return (\n    <React.Fragment>\n      {props.show ? <Backdrop onClick={props.onCancel} /> : null}\n      {/* {props.show && <Backdrop onClick={props.onCancel} />} <-- 어두운 배경 클릭시 Cancel 핸들러 동작*/}\n\n      <CSSTransition\n        in={props.show} // CSSTransition 의 in props 가 true 면 mount 하고 false면 unmount 함\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n\n/*\n{drawerIsOpen ? <Backdrop onClick={closeDrawer} /> : null}\n둘의 형상은 동일함 // if drawerIsOpen is True : <Backdrop onClick={closeDrawer} /> 이므로\n{drawerIsOpen && <Backdrop onClick={closeDrawer} />}\n*/\nexport default Modal;","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n  // [] 빈 배열의 주소값 같은거라고 생각 하면 됨. activeHttpRequests.current <- &activeHttpRequests\n  // useRef(); 인 경우, 주로 DOM 요소에 대한 직접적인 참조를 관리하기 위해 사용되고,\n  // activeHttpRequests는 컴포넌트의 상태와는 독립적으로 유지되어야 하는 변경 가능한 데이터를 관리하기 위해 사용됩니다.\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      // body 가 null 인 경우, headers 가 json 타입이면 fetch에 fail 한다.\n      console.log(`HTTP 요청 url --> ${method} }\\n${url.substring(0, 22)} \\n${url.substring(22, )}`);\n\n      // if (body !== null) {\n      //   headers = { \"Content-Type\": \"application/json\" };\n      // }\n      \n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal,\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\n        );\n\n        if (response.ok) {\n          // responseData.ok 는 상태코드가 200번대 일때 true를 반환한다\n          return responseData;\n        } else {\n          throw new Error(responseData.message);\n        }\n      } catch (error) {\n        setError(error.message);\n        setIsLoading(false);\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort()); // abort 메서드를 호출하여 HTTP 요청을 취소\n      /**\n          for (let i = 0; i < activeHttpRequests.current.length; i++) {\n            const abortCtrl = activeHttpRequests.current[i];\n            abortCtrl.abort();\n          }\n       */\n    };\n  }, []);\n  return { isLoading, error, sendRequest, clearError };\n};\n\n// // axios 서드파티Lib 쓰는 경우\n// if (isLoginMode) {\n//     // 로그인 모드일 때의 로직\n// } else {\n//     // 회원가입 모드일 때의 로직\n//     try {\n//         const response = await axios.post('http://localhost:5000/api/users/signup', {\n//             name: formState.inputs.name.value,\n//             email: formState.inputs.email.value,\n//             password: formState.inputs.password.value\n//         }, {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             }\n//         });\n\n//         const responseData = response.data;\n//         console.log(responseData);\n//         auth.login();\n//     } catch (err) {\n//         console.log(err);\n//     }\n// }\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true\n      }\n    }\n    default:\n\n      return state;\n  }\n};\n\nconst Input = props => {\n  // const [enteredValue, setEnteredValue] = useState('');\n  // const [isValue, sesValid] = useState(false); <-- 이렇게 해도 되지만\n  // 상태가 더 복잡하거나 상호 연관된 상태 일 때 useReducer 을 쓰면 코드가 더 간단해진다.\n\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',  // props.value 이 Empty면 ''\n    isTouched: false,\n    isValid: props.initialValid || false // props.value 이 Empty면 false\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid)\n  }, [id, value, isValid, onInput])\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  }\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n  \n  return (\n    <div className={`form-control ${!inputState.isValid &&\n      inputState.isTouched &&\n      'form-control--invalid'}`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {\n        !inputState.isValid &&\n        inputState.isTouched &&\n        <p>{props.errorText}</p>\n      }\n    </div >\n  );\n}\n\nexport default Input;\n\n\n// // useReducer 간단 예시\n// /** useReducer( dispatch때 호출할 함수, 호출할 함수의 첫번째 인자(accumulateState)의 초기 값 )\n//  * \n//  * 1. dispatch 로 reducer 함수를 호출 하고 \n//  * 2. dispatch 에 들어가는 인자값은 reducer 의 action 에 으로 전달된다.\n//  * 3. reducer 의 첫번째 인자인 accumulateState 에는 초기값이 들어 있고, 함수가 호출됨에 따라 값이 누적된다.\n//  * 4. reducer 함수가 return 하는 값들은 useReducer 함수에서 return 됬던 stateResult에 업데이트된다.\n//  * 5. useReducer 에서 return 됬던 stateResult 값이 이전 값과 다르면 리렌더링 한다.\n//  */\n\n// import React, { useReducer } from 'react';\n\n// const initialState = { count: 0 };\n\n// function reducer(accumulateState, action) {\n//   switch (action.type) {\n//     case 'increment':\n//       return { count: accumulateState.count + 1 };\n//     case 'decrement':\n//       return { count: accumulateState.count - 1 };\n//     default:\n//       throw new Error();\n//   }\n// }\n\n// const Counter = () => {\n//   const [stateResult, dispatch] = useReducer(reducer, initialState);\n\n//   return (\n//     <div>\n//       <p>Count: {stateResult.count}</p>\n//       <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n//       <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\n//     </div>\n//   );\n// };\n\n// export default Counter;\n\n\n\n\n\n\n\n// // useEffect 간단 예시\n// // /** useEffect( 의존성변수가 바뀔 떄마다 호출할 함수, 의존성 변수 )\n// //  *  동작 : 버튼을 누를 떄마다 \"로딩 중...\" 을 띄우고 count를 up 시키면서 'https://jsonplaceholder.typicode.com/posts/1' 링크 data를 읽어온다.\n// //  * \n// //  * 1. useEffect함수의 의존성변수로 count 를 지정\n// //  * 2. \"로딩 중...\" 출력\n// //  * 3. 버튼 클릭스 count 하나씩 Up 시킴\n// //  * 4. count 가 의존 변수이므로 useEffect에 등록한 함수 호출\n// //  * 5. 'https://jsonplaceholder.typicode.com/posts/1' 읽어서 화면에 출력 + Up된 count 출력\n// //  */\n\n// import React, { useState, useEffect } from 'react';\n\n// const DataFetcher = () => {\n//   const [data, setData] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [count, setCount] = useState(0); // 버튼 클릭 시 변경되는 상태 변수\n\n//   useEffect(() => {\n//     // JSONPlaceholder API에서 데이터를 가져옵니다.\n//     setLoading(true); // 새로운 요청을 시작할 때 로딩 상태로 설정\n//     fetch('https://jsonplaceholder.typicode.com/posts/1')\n//       .then(response => response.json())\n//       .then(data => {\n//         setData(data);\n//         setLoading(false);\n//       })\n//       .catch(error => {\n//         console.error('데이터를 가져오는 중 오류가 발생했습니다:', error);\n//         setLoading(false);\n//       });\n//   }, [count]); // count가 변경될 때마다 실행\n\n//   if (loading) {\n//     return <p>로딩 중...</p>;\n//   }\n\n//   return (\n//     <div>\n//       <h1>데이터 가져오기 예제</h1>\n//       {data ? <pre>{JSON.stringify(data, 2)}</pre> : <p>데이터가 없습니다.</p>}\n//       <button onClick={() => setCount(count + 1)}>데이터 다시 가져오기</button>\n//       <p1> Count : {count}</p1>\n//     </div>\n//   );\n// };\n\n// export default DataFetcher;\n","import { useCallback, useReducer } from \"react\";\n/**\n * 커스텀 훅\n * 중복된 로직의 경우 useXXXXX 타입으로 명명해 사용\n * 해당 커스텀 로직의 경우, UpdatePlace, NewPlace 에서 사용됨\n */\n\nconst formReducer = (state, action) => {\n  // console.log(state)\n  switch (action.type) {\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue; // inputId 가 undefined 인 경우의 for문 패턴은 Skip 한다.\n        }\n        if (inputId === action.inputId) {\n          // dispatch 한 ID 를 업데이트 한다\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          // dispatch 한 ID 를 업데이트 하지 않고\n          // 기존의 있는 id 를 가져온다\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    })\n  }, []);\n\n  const InputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      inputId: id,\n      value: value,\n      isValid: isValid,\n    })\n  }, []);\n\n  /*\n   * 밑에 두 함수는 기본적으로 기능이 동일하다.\n   * const exam = (a) => { return 1; }\n   * const exam = useCallback((a) => { return 1; })\n  */\n  // userCallback 함수를 쓰지 않으면 NewPlace 내부에 있는 함수들은 호출될떄마다 새로운 함수 인스턴스가 생성된다.\n  // 이를 방지 하기 위해 쓰는게 userCallback\n  // userCallback(함수,[의존성]) \"의존성\" 배열이 바뀌지 않는 이상 동일한 함수 인스턴스를 사용한다.\n  // [const descriptionInputHandler = useCallback((id, value, isValid) => { }, []);]\n  //  -> 빈 배열의 의미 >> 초기 렌더링 시 한 번만 생성 한다는 의미와 동일함. or 상태(props)변화에 의존하지 않음\n\n  return [formState, InputHandler, setFormData];\n};","import React, { useRef, useState, useEffect } from \"react\";\n\nimport Button from \"./Button\";\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const [filePath, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    if (!filePath) {\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n    fileReader.readAsDataURL(filePath);\n  }, [filePath])\n\n  const pickedHandler = (event) => {\n    // console.log(event.target.files);\n    // console.log(Object.keys(event.target)); // 이벤트 객체의 프로퍼티 이름들을 배열로 출력\n    console.dir(event.target.files);\n    // console.dir(event.target); // 이벤트 객체를 트리 구조로 출력\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n      /**\n       * setState 함수(예: setIsValid)는 상태를 즉시 업데이트하는 것이 아니라, \n       * 상태 업데이트를 예약하는 역할을 하기 때문에, 상태가 즉시 변경되지 않고 \n       * 다음 렌더링 사이클에서 변경되므로 \"fileIsValid = true;\" 이렇게 정의해서 넘김\n       */\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    props.onInput(props.id, pickedFile, fileIsValid);\n  };\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return (\n    <div className=\"form-control\">\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type='file'\n        accept=\".jpg,.png,.jpeg\"\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`} >\n        <div className=\"image-upload__preview\">\n        {/* <React.Fragment> */}\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n          {!previewUrl && <p>Please pick an image.</p>}\n        {/* </React.Fragment> */}\n        </div>\n        <Button type=\"button\" onClick={pickImageHandler}>\n          PICK IMAGE\n        </Button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  )\n};\n\nexport default ImageUpload;\n\n","import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport {\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE\n} from \"../../shared/util/validators\";\n\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nimport \"./PlaceForm.css\";\n\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    },\n    address: {\n      value: '',\n      isValid: false\n    },\n    image: {\n      value: null,\n      isValid: false\n    }\n  }, false);\n\n  const history = useHistory();\n\n  const placeSubmitHandler = async event => {\n    // ADD PLACE 를 누르면 새로고침 되는게 Default 설정이므로 새로고침 안되게끔 방지하는 코드\n    event.preventDefault();\n    try {\n      /** Image 가 아닌 경우 JSON */\n      // await sendRequest(\n      //   `${API_BASE.home}${API_BASE.placesRoutes}${API_PLACES.root}`,\n      //   \"POST\",\n      //   JSON.stringify({\n      //     title: formState.inputs.title.value,\n      //     description: formState.inputs.description.value,\n      //     address: formState.inputs.address.value,\n      //     creator: auth.userId\n      //   }),\n      //   { \"Content-Type\": \"application/json\" }\n      // );\n      // // Redirect the user to a different page\n      // history.push('/');\n\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      // formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value);\n\n      await sendRequest(\n        `${process.env.REACT_APP_BASE}${process.env.REACT_APP_PLACES_ROUTE}${process.env.REACT_APP_ROOT}`,\n        \"POST\",\n        formData,\n        { Authorization: `Bearer ${auth.token}` },\n      );\n      // await sendRequest('http://localhost:5000/api/places', 'POST', formData);\n      history.push('/');\n    } catch (err) { }\n  }\n  // console.log(`ADD PLACE 활성화 : ${formState.isValid}`);\n  return (\n    <React.Fragment>\n      <ErrorModal showError={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please Enter a valid title\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please Enter a valid description (at least 5 characters)\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please Enter a valid address\"\n          onInput={inputHandler}\n        />\n        <ImageUpload center \n          id=\"image\"\n          onInput={inputHandler}\n          errorText=\"please provide a image\"\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n        </Button>\n      </form>\n    </React.Fragment>\n  );\n};\n\nexport default NewPlace; //"],"sourceRoot":""}